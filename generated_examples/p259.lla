let rec main e (b : ((int))) : (int) = Tree ((for e = "foo" downto () do 19 done == (let foo foo = false
and c (main : int) : float = '\n' in 'a'))) (match g['\''] with
  (-0) -> new unit
end
) (dim 1 e)
and c (a : int) foo g = (begin () end = (delete 3.14))
and bar d foo c = dim 2 g
and g b main (e : unit) = foo ((for c = '7' to 3.14 do () done))

type b = Nil | D of char bool array of (array of float) | Empty of (array [*,*] of bool ref) char

type a = Tree | Cons of bool | Tree of e int unit unit

