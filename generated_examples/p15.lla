let f (b : e -> int) d = dim g

let c = begin g[if 18 then (),match 15 with
  (b) -> 7
end
] end

type f = Nil | A of array of bool ref int bar | B
 and g = D | B

type g = Cons | B

type foo = A

let f b foo c = + (match let f b f d : unit = () in 21 with
  (-.0.0) -> new char
| a -> g[(),"bar"]
end
)
and b (c : bool) g = (begin if '\n' then 32 end)
and mutable a[if false then begin 38 end,-. (while begin () end do let e g foo bar : float = ()
and d foo g = true
and f (c : array [*] of array of (unit)) e g (d : float) = 16
and c g g = 26 in false done)]
and f foo = dim g

