let rec c bar (f : unit) main main = -. (while ("bar") do ! () done)
and b main f g (f : array [*] of int) = (new unit -> unit ref -> unit *. (delete 0.0))
and mutable d[match - false with
  '\n' -> begin 42.0 end
| '\n' -> let g a bar : (unit) = 6
and mutable a['a']
and mutable f
and c c = 2.56
and a main (main : bool) c = 15 in 42.0
| (-.2.56) -> a 42.0 '\n'
end
,while let c f bar e g : bool = "bar"
and a : int = '\n'
and b (c : bool) e b f = 2 in 0.0 do new char done]

type foo = D of float -> char float | Tree of array of float unit char

type e = Empty of int array of int (float) (foo) | Nil | D of array [*,*] of array of array of array of unit ref ref int int
 and d = Nil | A | C

type b = Cons of float (bool) int -> float float | Cons | B

let rec c = match + () with
  C (-.42.0) D (C) Nil (+.2.56) g -> while 0.0 do '\n' done
| (true) -> delete false
| '\n' -> if 42.0 then false
end

and a a = while while true do 3.14 done do (3.14) done
and foo f g a g : int = match match () with
  (+29) -> '\n'
| main -> false
| (-21) -> false
end
 with
  (+.2.56) -> bar ()
| ((+7)) -> dim g
| true -> e[true]
end


let a b : (array [*,*] of unit) = f (delete (for bar = false downto 12 do () done))
and c f = let c = "foo"
and main (main : array [*] of bool -> float) e = 2.56 in ((3 := 42.0))
and g = (while "foo" do 8 done || (match false with
  g -> 3
| Cons (+.2.56) false f -> 3.14
end
))
and a f e foo main : (unit) = dim f
and a (g : bool -> bool) a c : array [*,*] of bool ref = if () then ("Route66")

type e = Empty | Empty

type main = B | C of bar b -> (d) -> char | Empty of float int ref

type bar = C of array [*] of bool array [*,*] of (float) float (unit) | Cons | Tree

type c = C | D | A of int array [*] of array of float -> float ref ref | D of unit unit g

