let rec bar main (c : array [*] of unit) = g[new array [*] of foo,main[let bar b bar = () in '\n']]
and foo d (b : g) e = for c = 'a' downto 34 do b[true] done
and c (b : c) e a (bar : (c -> e -> int)) = for b = 0.0 downto false do if 42.0 then 3.14 done
and main g foo e = while let rec g = "bar"
and mutable bar[false]
and a b c main = 7 in true do ("foo" mod ()) done
and a g = (b[false] || (new unit))

type g = D | B

type b = B | D | Cons | Tree

