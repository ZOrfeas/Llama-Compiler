type d = Tree | A | C | Nil

let b e = let a foo foo d = 3 in (bar[12])
and g = f[begin not (- true) end,match new unit -> (f) ref ref -> float -> float with
  Tree 'a' -> (())
| f -> let rec mutable e
and b = 16
and d bar (c : unit) bar a = 3.14 in "foo"
| false -> delete ()
end
]

type g = D | B | A of int (foo) ref -> (unit -> float ref) -> (unit) -> char ref (g)

