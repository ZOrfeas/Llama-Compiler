type a = Tree | B | D

type e = D | B

let mutable foo[bar[new f,dim 1 c]]
and mutable bar
and g b d bar = main (let g e f e (main : d ref -> float) = "bar"
and g f (c : array of (unit)) a d : bool = '\n'
and mutable c[2,'\''] : ((unit))
and c (a : char) = ()
and bar = 41 in (match true with
  A ((-35)) true -> 2.56
| 42.0 -> 'a'
end
))
and bar (foo : (e)) bar d c = begin (begin ('\n') end) end
and bar g (bar : array [*] of char) d = for f = "Route66" downto () do c['7',false] done

