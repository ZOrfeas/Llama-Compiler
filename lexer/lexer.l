%{
// token definitions, possibly omissible later on
#define T_eof 0
#define T_and ...
#define T_array ...
#define T_begin ...
#define T_bool ...
#define T_char ...
#define T_delete ...
#define T_dim ...
#define T_do ...
#define T_done ...
#define T_downto ...
#define T_else ...
#define T_end ...
#define T_false ...
#define T_float ...
#define T_for ...
#define T_if ...
#define T_in ...
#define T_int ...
#define T_let ...
#define T_match ...
#define T_mod ...
#define T_mutable ...
#define T_new ...
#define T_not ...
#define T_of ...
#define T_rec ...
#define T_ref ...
#define T_then ...
#define T_to ...
#define T_true ...
#define T_type ...
#define T_unit ...
#define T_while ...
#define T_with ...

#define T_idlower ...
#define T_idupper ...

#define T_intconst ...
#define T_floatconst ...
#define T_charconst ...

int lineno = 1;
%}

// W [ \t\n\r]     /*    white space   */

D  [0-9]         /*       digit      */
Ll [a-z]         /* lowercase letter */
Lu [A-Z]         /* uppercase letter */
L  [{Lu}{Ll}]    /*     any letter   */
Hex [{D}a-f]     /*   any hex digit  */
// E [\\0\\"\\'\\\\]   /* escape sequences */

%option noyywrap

%%

"and"       { return T_and;     }
"array"     { return T_array;   }
"begin"     { return T_begin;   }
"bool"      { return T_bool;    }
"char"      { return T_char;    }
"delete"    { return T_delete;  }
"dim"       { return T_dim;     }
"do"        { return T_do;      }
"done"      { return T_done;    }
"downto"    { return T_downto;  }
"else"      { return T_else;    }
"end"       { return T_end;     }
"false"     { return T_false;   }
"float"     { return T_float;   }
"for"       { return T_for;     }
"if"        { return T_if;      }
"in"        { return T_in;      }
"int"       { return T_int;     }
"let"       { return T_let;     }
"match"     { return T_match;   }
"mod"       { return T_mod;     }
"mutable"   { return T_mutable; }
"new"       { return T_new;     }
"not"       { return T_not;     }
"of"        { return T_of;      }
"rec"       { return T_rec;     }
"ref"       { return T_ref;     }
"then"      { return T_then;    }
"to"        { return T_to;      }
"true"      { return T_true;    }
"type"      { return T_type;    }
"unit"      { return T_unit;    }
"while"     { return T_while;   }
"with"      { return T_with;    }

{Ll}({L}|{D}|_)*    { return T_idlower; }
{Lu}({L}|{D}|_)*    { return T_idupper; }

{D}+                        { return T_intconst;   }
({D}+\.{D}+(e[+-]?{D}+)?)   { return T_floatconst; }

'([^'"\\\n\r]|((\\([ntr0\\'"])|(x{Hex}{Hex}))))'    { return T_charconst; }


%%
